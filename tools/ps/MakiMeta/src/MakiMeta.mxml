<?xml version="1.0" encoding="utf-8"?>
<csxs:CSExtension xmlns:fx="http://ns.adobe.com/mxml/2009"
				  xmlns:s="library://ns.adobe.com/flex/spark"
				  xmlns:csxs="com.adobe.csxs.core.*"
				  close="csextension1_closeHandler(event)"
				  creationComplete="csextension1_creationCompleteHandler(event)"
				  showStatusBar="false">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.csawlib.photoshop.Photoshop;
			import com.adobe.csxs.core.CSInterface;
			import com.adobe.csxs.core.CSXSInterface;
			import com.adobe.photoshop.*;
			import com.adobe.xmp.core.*;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			private const SELECT:int = Photoshop.app.stringIDToTypeID("select");
			private const MAKE:int = Photoshop.app.stringIDToTypeID("make");
			private const DELETE:int = Photoshop.app.stringIDToTypeID("delete");
			
			private const NULL:int = Photoshop.app.stringIDToTypeID("null");
			private const LAYER:int = Photoshop.app.stringIDToTypeID("layer");
			private const ORDINAL:int = Photoshop.app.stringIDToTypeID("ordinal");
			
			private var maki:Namespace = new Namespace("maki", "http://makiengine.com/");
			private var currentLayer:Layer = null;			
			
			protected function csextension1_creationCompleteHandler(event:FlexEvent):void
			{
				CSInterface.instance.autoThemeColorChange = true;
				
				// EXTRA SPECIAL NOTE OF PARAMOUNT IMPORTANCE:
				// CSXSInterface is deprecated, but evalScript("PhotoshopRegisterEvent"... doesn't work
				// with the newer CSInterface!
				try {
					CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", SELECT.toString());
					CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", MAKE.toString());
					CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", DELETE.toString());
					ExternalInterface.addCallback("PhotoshopCallback" + extensionId, photoshopCallback);
				} catch(ex:*) {
					Alert.show(ex);
				}
				
				if(Photoshop.app.activeDocument != null) {
					currentLayer = Photoshop.app.activeDocument.activeLayer;
				}
				updateTextBox();
			}
			
			protected function csextension1_closeHandler(event:Event):void
			{
				saveData(currentLayer);
			}
			
			protected function applyButton_clickHandler(event:MouseEvent):void
			{
				saveData(currentLayer);
			}
			
			protected function metaTextArea_keyFocusChangeHandler(event:FocusEvent):void
			{
				// Prevent tab presses from switching focus
				event.preventDefault();
				event.target.insertText("\t");
			}
			
			private function photoshopCallback(eventID:Number, descID:Number):void
			{
				var actionDesc:ActionDescriptor = new ActionDescriptor();
				var ref:ActionReference;
				var cls:int;
				
				switch(eventID) {
					case SELECT:
						try {
							actionDesc.fromID(descID);
							ref = actionDesc.getReference(NULL);
							cls = ref.getDesiredClass();
							if(cls == LAYER) {
								layerSelectionChanged();
							}
						} catch(ex:*) {
							Alert.show(ex, "Error SELECT callback");
						}
						break;
					case MAKE:
						try {
							actionDesc.fromID(descID);
							ref = actionDesc.getReference(NULL);
							cls = ref.getDesiredClass();
							if(cls == LAYER) {
								layerSelectionChanged();
							}
						} catch(ex:*) {
							Alert.show(ex, "Error in MAKE callback");
						}
						break;
					case DELETE:
						actionDesc.fromID(descID);
						ref = actionDesc.getReference(NULL);
						cls = ref.getDesiredClass();
						if(cls == LAYER) {
							if(ref.getEnumeratedType() == ORDINAL) {
								// This means we are deleting the currently selected layer
								currentLayer = null;
							}
							try {
								layerSelectionChanged();
							} catch(ex:*) {
								Alert.show(ex, "Error in DELETE callback");
							}
						}
						break;
					default:
						break;
				}
			}
			
			private function updateTextBox():void
			{
				if(currentLayer != null) {
					metaTextArea.enabled = true;
					var xmp:XMPMeta = new XMPMeta(currentLayer.xmpMetadata.rawData);
					
					try {
						var prop:XMPProperty = xmp.maki::data;
						if(prop.exists()) {
							var encodedNewLines = prop.value;
							encodedNewLines = encodedNewLines.replace(/%0d/g, '\r');
							encodedNewLines = encodedNewLines.replace(/%0a/g, '\n');
							encodedNewLines = encodedNewLines.replace(/%09/g, '\t');
							encodedNewLines = encodedNewLines.replace(/%25/g, '%');
							metaTextArea.text = encodedNewLines;
						} else {
							metaTextArea.text = "";
						}
					} catch(ex) {
						// Catch type coersion errors (sometimes we get an XMPStruct instead
						// of an XMPProperty)
						metaTextArea.text = "";
					}					
				} else {
					metaTextArea.enabled = false;
					metaTextArea.text = "";
				}
			}
			
			private function saveData(layer:Layer):void
			{
				try {
					if(layer != null) {
						var xmp:XMPMeta = new XMPMeta(layer.xmpMetadata.rawData);
						var encodedNewLines = metaTextArea.text;
						encodedNewLines = encodedNewLines.replace(/%/g, '%25');
						encodedNewLines = encodedNewLines.replace(/\r/g, '%0d');
						encodedNewLines = encodedNewLines.replace(/\n/g, '%0a');
						encodedNewLines = encodedNewLines.replace(/\t/g, '%09');
						xmp.maki::data = encodedNewLines;
						layer.xmpMetadata.rawData = new String(xmp.serializeToBuffer());
					}
				} catch(ex:*) {
					Alert.show(ex);
				}
			}
			
			private function layerSelectionChanged():void
			{
				// Save previously selected layer
				if(currentLayer != null) {
					saveData(currentLayer);
				}
				
				// Get a ref to the now selected layer
				if(Photoshop.app.activeDocument != null) {
					currentLayer = Photoshop.app.activeDocument.activeLayer;
				}
				
				// Show contents of current layer in textbox
				updateTextBox();
			}
			
		]]>
	</fx:Script>
	<s:Group height="100%" width="100%">
		<s:Button id="applyButton" right="16" bottom="2" label="Apply" click="applyButton_clickHandler(event)"/>
		<s:TextArea id="metaTextArea" left="3" right="3" top="3" bottom="26"
					fontFamily="Courier New" horizontalScrollPolicy="auto"
					keyFocusChange="metaTextArea_keyFocusChangeHandler(event)" lineBreak="explicit"
					verticalScrollPolicy="auto"/>
	</s:Group>
</csxs:CSExtension>