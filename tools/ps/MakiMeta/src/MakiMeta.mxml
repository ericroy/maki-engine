<?xml version="1.0" encoding="utf-8"?>
<csxs:CSExtension xmlns:fx="http://ns.adobe.com/mxml/2009"
				  xmlns:s="library://ns.adobe.com/flex/spark"
				  xmlns:csxs="com.adobe.csxs.core.*"
				  close="csextension1_closeHandler(event)"
				  initialize="csextension1_initializeHandler(event)" showStatusBar="false">
	
	<fx:Script>
		<![CDATA[
		
			import com.adobe.csawlib.photoshop.Photoshop;
			import com.adobe.photoshop.*;
			import com.adobe.csxs.core.CSInterface;
			import com.adobe.photoshop.Layer;
			import com.adobe.xmp.core.XMPMeta;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			//private const CURRENT_LAYER:int = Photoshop.app.stringIDToTypeID("currentLayer");
			//private const COPY:int = Photoshop.app.stringIDToTypeID("copy");
			private const SELECT:int = Photoshop.app.stringIDToTypeID("selectionEnum");
			private const NULL:int = Photoshop.app.stringIDToTypeID("null");
			private const LAYER:int = Photoshop.app.stringIDToTypeID("layer");
			
			private var maki:Namespace = new Namespace("maki", "http://makiengine.com/");
			private var currentLayer:Layer = null;			
			
			protected function csextension1_initializeHandler(event:FlexEvent):void
			{
				CSInterface.instance.autoThemeColorChange = true;
				
				// We can provide comma delimited list of event ids if we want (as a string)
				CSInterface.instance.evalScript("PhotoshopRegisterEvent", SELECT.toString());
				ExternalInterface.addCallback("PhotoshopCallback"+root.loaderInfo.parameters["extID"].toString(), photoshopCallback);
				
				if(Photoshop.app.activeDocument != null) {
					currentLayer = Photoshop.app.activeDocument.activeLayer;
				}
				updateTextBox();
			}
			
			protected function csextension1_closeHandler(event:Event):void
			{
				saveData(currentLayer);
			}
			
			protected function applyButton_clickHandler(event:MouseEvent):void
			{
				saveData(currentLayer);
			}
			
			protected function metaTextArea_keyFocusChangeHandler(event:FocusEvent):void
			{
				// Prevent tab presses from switching focus
				event.preventDefault();
				event.target.insertText("\t");
			}
			
			public function photoshopCallback(eventID:Number, descID:Number):void
			{
				Alert.show("photoshop event");
				switch(eventID) {
					case SELECT:
						var desc:ActionDescriptor = new ActionDescriptor();
						desc.fromID(descID);
						var ref:ActionReference = desc.getReference(NULL);
						if(ref.getDesiredClass() == LAYER) {
							layerSelectionChanged();
						}						
						break;
					default:
						break;
				}
			}
			
			private function updateTextBox():void
			{
				if(currentLayer != null) {
					metaTextArea.enabled = true;
					var xmp:XMPMeta = new XMPMeta(currentLayer.xmpMetadata.rawData);
					metaTextArea.text = xmp.maki::data;
				} else {
					metaTextArea.enabled = false;
					metaTextArea.text = "";
				}
			}
			
			private function saveData(layer:Layer):void
			{
				if(layer != null) {
					var xmp:XMPMeta = new XMPMeta(layer.xmpMetadata.rawData);
					xmp.maki::data = metaTextArea.text;
					layer.xmpMetadata.rawData = new String(xmp.serializeToBuffer());
				}
			}
			
			private function layerSelectionChanged():void
			{
				// Save previously selected layer
				if(currentLayer != null) {
					saveData(currentLayer);
				}
				
				if(Photoshop.app.activeDocument != null) {
					currentLayer = Photoshop.app.activeDocument.activeLayer;
				}		
				updateTextBox();
			}

		]]>
	</fx:Script>
	<s:Group height="100%" width="100%">
		<s:Button id="applyButton" right="16" bottom="2" label="Apply" click="applyButton_clickHandler(event)"/>
		<s:TextArea id="metaTextArea" left="3" right="3" top="3" bottom="26"
					fontFamily="Courier New" horizontalScrollPolicy="auto"
					keyFocusChange="metaTextArea_keyFocusChangeHandler(event)" lineBreak="explicit"
					verticalScrollPolicy="auto"/>
	</s:Group>
</csxs:CSExtension>